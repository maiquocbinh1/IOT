MQTT Topics Overview - IoT Sensor System

Các MQTT Topics được sử dụng trong hệ thống

1. iot/sensor/data 
File liên quan: routes/mqtt/sensorDataTopic.js

Mục đích: ESP32 gửi dữ liệu cảm biến về Backend
Hướng: ESP32 → Backend

API Endpoints:
- GET /api/mqtt/sensor-data - Lấy dữ liệu cảm biến từ database
- GET /api/mqtt/sensor-data/latest - Lấy dữ liệu mới nhất
- GET /api/mqtt/sensor-data/sensor/:sensorId - Lấy dữ liệu theo sensor ID
- POST /api/mqtt/sensor-data/simulate - Mô phỏng gửi dữ liệu qua MQTT
- GET /api/mqtt/sensor-data/statistics/:sensorId - Thống kê dữ liệu
- GET /api/mqtt/sensor-data/topic-info - Thông tin về topic

Data Format:
{
  "sensor_id": 1,
  "temperature": 24.5,
  "humidity": 60,
  "light": 400,
  "timestamp": "2024-01-15T08:00:00Z"
}

---

2. iot/led/control
File liên quan: routes/mqtt/ledControlTopic.js

Mục đích: Backend gửi lệnh điều khiển LED đến ESP32
Hướng: Backend → ESP32

API Endpoints:
- POST /api/mqtt/led/control - Gửi lệnh điều khiển LED
- POST /api/mqtt/led/control/batch - Gửi nhiều lệnh cùng lúc
- GET /api/mqtt/led/control/history - Lịch sử lệnh điều khiển
- GET /api/mqtt/led/control/status - Trạng thái MQTT
- GET /api/mqtt/led/control/topic-info - Thông tin về topic

Data Format:
{
  "action": "on",
  "device_name": "LED",
  "timestamp": "2024-01-15T08:00:00Z",
  "command_id": "cmd_1705312800000"
}

---

3. iot/led/status
File liên quan: routes/mqtt/ledStatusTopic.js

Mục đích: ESP32 gửi trạng thái LED sau khi thực hiện lệnh
Hướng: ESP32 → Backend

API Endpoints:
- GET /api/mqtt/led/status - Lấy trạng thái LED hiện tại
- GET /api/mqtt/led/status/history - Lịch sử trạng thái
- GET /api/mqtt/led/status/device/:deviceName - Trạng thái thiết bị cụ thể
- POST /api/mqtt/led/status/simulate - Mô phỏng gửi trạng thái
- GET /api/mqtt/led/status/statistics - Thống kê trạng thái
- GET /api/mqtt/led/status/monitor - Monitor real-time
- GET /api/mqtt/led/status/topic-info - Thông tin về topic

Data Format:
{
  "device_name": "LED",
  "status": "on",
  "description": "LED turned on successfully",
  "timestamp": "2024-01-15T08:00:00Z",
  "status_id": "status_1705312800000"
}

---

Luồng hoạt động của hệ thống

Luồng 1: Cập nhật dữ liệu cảm biến
ESP32 → MQTT (iot/sensor/data) → Backend → Database → WebSocket → Frontend

1. ESP32 đo dữ liệu cảm biến
2. Gửi qua MQTT topic iot/sensor/data
3. Backend nhận, lưu vào database
4. Broadcast qua WebSocket đến Frontend

Luồng 2: Điều khiển LED
Frontend → Backend → MQTT (iot/led/control) → ESP32 → MQTT (iot/led/status) → Backend → WebSocket → Frontend

1. Frontend gửi lệnh điều khiển
2. Backend publish qua MQTT topic iot/led/control
3. ESP32 nhận lệnh, thực hiện điều khiển
4. ESP32 gửi trạng thái qua MQTT topic iot/led/status
5. Backend nhận trạng thái, lưu database
6. Broadcast qua WebSocket đến Frontend

---

Cấu trúc file theo MQTT Topics

BE/
├── routes/
│   └── mqtt/
│       ├── sensorDataTopic.js    # Topic: iot/sensor/data
│       ├── ledControlTopic.js    # Topic: iot/led/control
│       └── ledStatusTopic.js     # Topic: iot/led/status
├── config/
│   ├── mqtt.js                   # MQTT Client configuration
│   └── websocket.js              # WebSocket configuration
└── server.js                     # Main server với MQTT handlers

---

Test các MQTT Topics

Test Sensor Data Topic
# Subscribe để nhận dữ liệu
mosquitto_sub -h localhost -t "iot/sensor/data"

# Publish dữ liệu test
mosquitto_pub -h localhost -t "iot/sensor/data" -m '{"sensor_id":1,"temperature":25.5,"humidity":60,"light":400}'

Test LED Control Topic
# Subscribe để nhận lệnh điều khiển
mosquitto_sub -h localhost -t "iot/led/control"

# Publish lệnh test
mosquitto_pub -h localhost -t "iot/led/control" -m '{"action":"on","device_name":"LED"}'

Test LED Status Topic
# Subscribe để nhận trạng thái
mosquitto_sub -h localhost -t "iot/led/status"

# Publish trạng thái test
mosquitto_pub -h localhost -t "iot/led/status" -m '{"device_name":"LED","status":"on","description":"LED turned on"}'

---

Database Tables liên quan

- sensor_data: Lưu dữ liệu từ topic iot/sensor/data
- action_history: Lưu lịch sử từ topic iot/led/control và iot/led/status

---

Configuration

Các topic được cấu hình trong file .env:
MQTT_SENSOR_DATA_TOPIC=iot/sensor/data
MQTT_LED_CONTROL_TOPIC=iot/led/control
MQTT_LED_STATUS_TOPIC=iot/led/status
